#!/bin/bash
### docker container control box  V. 1.7
### Made by ralf.yang@gsshop.com, goody80762@gmail.com

## Make sure build DIR
BUildDirConf="$HOME/build_dir.conf"
	if [ ! -f $BUildDirConf ];then
		touch  $BUildDirConf
	fi
	
extra_input=$1
BuildDir=`cat $BUildDirConf`
exefile=`which dcs`


## Please modify under variable for the private repository if you have.
#Docker_repo=`cat /data/z/etc/init.d/docker | grep "^connection" | awk -F '=' '{print $2}' | sed -e 's/"//g' `
#Docker_repo="[Docker repository IP]:[port]"
Docker_repo=""

## find a command
Docker_comm=`which docker | head -1`
## OS Check

## Check the sudo
	if [[ `(which sudo 2> /dev/null)` = "" ]];then
		SUDO=""
	else
		SUDO="sudo"
	fi

Comm="$SUDO $Docker_comm"

ChkOS=`cat /etc/*-release 2> /dev/null | head -1`
        if [[ $(uname) == Linux ]];then
			osv="linux"
		elif [[ $(uname) == Darwin ]];then
			Comm="$Docker_comm" 
			osv="osx"
        fi


## Temporary file create for work memory
Tmp_imgfile="$HOME/docker_imgtmp.txt"
Tmp_psfile="$HOME/docker_pstmp.txt"
Tmp_psAfile="$HOME/docker_psAtmp.txt"
Tmp_tag="$HOME/docker_tag.txt"

exit_abnormal() {
stty echo 
rm -f $Tmp_imgfile $Tmp_psfile $Tmp_psAfile $Tmp_tag 2> /dev/null
exit 1
}


### Break sign catch for line break fix
trap exit_abnormal SIGINT SIGTERM SIGKILL




BAR="=========================================================================================================================================================" > $Tmp_imgfile
echo $BAR  >> $Tmp_imgfile
echo "   [:: Docker Images ::]"   >> $Tmp_imgfile
echo $BAR  >> $Tmp_imgfile
$Comm images | awk '{print NR-1,"|",$0}' >> $Tmp_imgfile

echo ""  >> $Tmp_psAfile
echo ""  > $Tmp_psAfile
echo $BAR  >> $Tmp_psAfile
echo "   [:: Active Processors ::]"  >> $Tmp_psAfile
echo $BAR  >> $Tmp_psAfile
$Comm ps |awk '{print NR-1,"|",$0}' >> $Tmp_psAfile

echo ""  >> $Tmp_psfile
echo ""  > $Tmp_psfile
echo $BAR  >> $Tmp_psfile
echo "   [:: All Processors ::]"  >> $Tmp_psfile
echo $BAR  >> $Tmp_psfile
$Comm ps -a |awk '{print NR-1,"|",$0}' >> $Tmp_psfile

	if [[ $osv = "osx" ]];then
		sed -i "" 's/^0 /  /g' $Tmp_imgfile
		sed -i "" 's/^0 /  /g' $Tmp_psAfile
		sed -i "" 's/^0 /  /g' $Tmp_psfile
	else
		sed -i  's/^0 /  /g' $Tmp_imgfile
		sed -i  's/^0 /  /g' $Tmp_psAfile
		sed -i  's/^0 /  /g' $Tmp_psfile
	fi


Print_screen(){
## Print screen
clear
cat $Tmp_imgfile $Tmp_psAfile $Tmp_psfile

echo ""
echo ""
echo "======================================"
echo " Please Insert a command as a list :)"
echo "= Processor =========================="
echo " Run the container ---------- [ run  ]"
echo " Start & Attach ------------- [ sa   ]"
echo " Stop           ------------- [ stop ]"
echo " Send command   ------------- [ exec ]"
echo " Remove PS      ------------- [ rm   ]"
echo " Purge Processor ------------ [ purge]"
echo "= Image =============================="
echo " Pull Image     ------------- [ pull ]"
echo " Remove Image   ------------- [ rmi  ]"
echo " Build Image    ------------- [ build]"
echo " Purge volume   ------------- [ clean]"
echo "= Commit & Push ======================"
echo " Commit --------------------- [ ci   ]"
echo " Tagging & Push ------------- [ push ]"
echo "======================================"
echo " Cli ---------- [ Type free as below ]"
echo " ex) stop 910930 19809 102039 09103"
echo "======================================"
echo " Exit  	                     Ctrl+c "
echo "======================================"

}


	if [[ $extra_input = "" ]];then
		Print_screen
		read CommandX
	else
		CommandX=$extra_input
	fi


## Make a number & array
ImageNum=`tail -1 $Tmp_imgfile | awk '{print $1}'`
PsNum=`tail -1 $Tmp_psfile | awk '{print $1}'`
PsANum=`tail -1 $Tmp_psAfile | awk '{print $1}'`
ImageIDArray=(`cat $Tmp_imgfile | awk '{print $5}' | tail -n +4`)
ProcessorIDArray=(`cat $Tmp_psfile | awk '{print $3}' | tail -n +5`)
ProcessorAIDArray=(`cat $Tmp_psAfile | awk '{print $3}' | tail -n +5`)


## Function for command as below
run_container(){
	$Comm run -ti --name $2 ${ImageIDArray[$1]} /bin/bash
}


sa_container(){
	$Comm start $1
	$Comm attach $1
}


comm_container(){
	$Comm exec ${ProcessorAIDArray[$1]} $2
	echo " - Please insert a any key if you have done - "
	read
}

build_image(){

	if [[ ! -d $BuildDir ]];then
		echo "$BAR"
		echo " Please insert a Directory for image build under the Dockerfile [ex) /data/git/dockerfiles_dir]"
		read ReadDir
		#sudo sed -i "s#^BuildDir=\"\"#BuildDir=\"$ReadDir\"#g" $exefile
		echo "$ReadDir" > $BUildDirConf
		cd $ReadDir
	else 
		cd $BuildDir
	fi

	if [[ ! -f ./docker_build_auto.sh ]];then
		echo "$BAR"
		echo "Do you need to install docker_build_auto.sh here ? [ y/n ]"
		read Answ
			if [[ $Answ = "y" ]] || [[ $Answ = "Y" ]];then
				wget goody80.github.io/docker_build_auto/docker_build_auto.sh
				sudo chmod 755 docker_build_auto.sh
			else
				echo "$BAR"
				echo "You need to install the docker_build_auto.sh script for this work"
				echo "$BAR"
				exit 0
			fi
	fi
	./docker_build_auto.sh
}

rm_container(){
	$Comm rm ${ProcessorIDArray[$1]}
}

pull_image(){
	$Comm pull $1
}


remove_image(){
	$Comm rmi -f ${ImageIDArray[$1]}
}

ci_image(){
	$Comm commit ${ProcessorAIDArray[$1]} $2
	echo "$Comm commit ${ProcessorAIDArray[$1]} $2"
}

Stop_container(){
	$Comm stop ${ProcessorAIDArray[$1]}
	echo "$Comm stop ${ProcessorAIDArray[$1]}"
}

Purge_image(){
	$Comm rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	$Comm rm -v $(docker ps --filter status=created -q 2>/dev/null) 2>/dev/null
}



Clean_volume(){
	$Comm volume ls -qf dangling=true | xargs docker volume rm
}

	## Case selection for instructions
	if [[ `(echo "$CommandX" | awk '{print $2}' )` = "" ]];then
		case "$CommandX" in
			build)
				build_image
				;;
           		run)	
				echo " == Please insert a image number [1 - $ImageNum ]"
				read ImageNum
				echo " == Please insert a new name for Run :"
				read DockerName
					if [[ $DockerName != "" ]];then
				                run_container $ImageNum $DockerName
					else
						echo " == No Image ID == "
					fi
				;;
			sa)
				echo " == Please insert docker name for start :"
				read St_docker
					if [[ $St_docker != "" ]];then
				                sa_container $St_docker
					else
						echo " == No Processor ID == "
					fi
				;;
			exec)
				echo " == Please insert a Active Processor number [1 - $PsANum ]"
				read ActiveProcessorNum
				echo " == Please insert a command for send to container ?"
				read CommandToContainer
					if [[ $ActiveProcessorNum != "" ]];then
				                comm_container $ActiveProcessorNum $CommandToContainer
					else
						echo " == No Processor No. == "
					fi
				;;
			rm)
				echo " == Please insert a Processor number for Remove [1 - $PsNum ]"
				read ProcessorNum
				echo " == [ ${ProcessorIDArray[$ProcessorNum]} ]: Are you sure ? [y / n] "
				read RmAnswer
					if [[ $ProcessorNum != "" ]];then
						if [[ $RmAnswer = "y" ]];then
					                rm_container $ProcessorNum
						fi
					else
						echo " == No Processor No. == "
					fi
				;;
			pull)
				echo " == Please insert an image name for pulls:"
				read ImagePullname
					if [[ $ImagePullname != "" ]];then
				                pull_image $ImagePullname 
					else
						echo " == No image name == "
					fi
				;;
			purge)
				if [[ $extra_input = "" ]];then
					echo " == No use processor will be remove. Are sure that ? [ y/n ]:"
					read ImagePurge
						if [[ $ImagePurge = "y" ]];then
					                Purge_image
						fi
				else
					Purge_image
				fi
				;;
			clean)
				if [[ $extra_input = "" ]];then
					echo " == No use volume will be remove. Are sure that ? [ y/n ]:"
					read VolumeClean
						if [[ $VolumeClean = "y" ]];then
				        	        Clean_volume
						fi
				else
						Clean_volume
				fi
				;;
			rmi)
				echo " == Please insert a number for remove the image [1 - $ImageNum] "
				read RmImageNum
				echo " == [ ${ImageIDArray[$RmImageNum]} ]: Are you sure ? [y / n]"
				read RmIAnswer
            
					if [[ $RmImageNum != "" ]];then
						if [[ $RmIAnswer = "y" ]];then
							remove_image $RmImageNum
						fi
					else
						echo " == No image No. == "
					fi
				;;
            
			ci)
				echo " == Please insert a number of Active processor [1 - $PsANum] "
				read CiNum
				echo " == Please make sure the name for use:"
				read CiAnswer
					if [[ $CiNum != "" ]];then
							ci_image $CiNum $CiAnswer
					else
						echo " == No image No. == "
					fi
				
				;;
			push)
					if [[ $Docker_repo != "" ]];then
						$Comm images | fgrep -v "$Docker_repo" | awk '{print NR-1,$0}' | sed -e 's/^0/ /g' > $Tmp_tag
					else
						$Comm images | awk '{print NR-1,$0}' | sed -e 's/^0/ /g' > $Tmp_tag
					fi
            
				cat $Tmp_tag
				TagNum=`cat $Tmp_tag | tail -1 | awk '{print $1}'`
            
				echo " == Please choose a number for tag and push [1 - $TagNum] "
				read TagPush
					if [[ $TagPush != "" ]];then
						 echo "TagetPush=`grep \"^$TagPush \" $Tmp_tag | awk '{print $2":"$3}'`"
						 TagetPush=`grep "^$TagPush " $Tmp_tag | awk '{print $2":"$3}'`
						if [[ $Docker_repo = "" ]];then
							echo "== Do you need to make a tag ? [y / n]"
							read Tagcomm
								if [[ $Tagcomm = "y" ]];then
									echo "Please insert a tag name:"
									read Tagname
									$Comm tag $TagetPush $Tagname
									$Comm push $Tagname
								else
									$Comm push $TagetPush
								fi
						else
							$Comm tag $TagetPush $Docker_repo/$TagetPush
							$Comm push $Docker_repo/$TagetPush
						fi
					fi
				;;
            
			stop)
				echo " == Please insert a number of Active processor [1 - $PsANum] "
				read StopNum
					if [[ $StopNum != "" ]];then
							Stop_container $StopNum
					else
						echo " == No image No. == "
					fi
				
				;;
            
		esac
	else
		$Comm $CommandX
	fi

        if [[ $extra_input = "" ]];then
		$exefile
        fi
